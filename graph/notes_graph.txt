
=> imp and easier to just create each entry beforehand. 
  1. avoids bugs on getOrDefault, adding entry while creating adj list, 
  2. as well as null check on adj list duing dfs
        for(int i=0;i<n;i++) {
            adj.put(i,new ArrayList<>());
        }
    rather than:
      adj.put(curr[0], adj.getOrDefault(curr[0], new ArrayList<Integer>()).add(curr[1]));
 
=> How to handle visited and add to visited?
  -in this order:
      if(visited.contains(start))
            return;  
      visited.add(start);
  -first check if visited
  -then add curr node to visited, because now we are visiting it
  
=>> Uniod-find method seems faster than dfs

=>> find path between 2 given nodes in graph
  -union find is fastet
  -then BFS -> seems more natural to find path between 2 given nodes
  -then DFS
  
==> Find ALL pathes from A to B in graph
  -Finding all paths, needs DFS. or DFS is more natural way to find all paths between 2 nodes
  -finding all PATH will need backtrack once all paths from one neighbor is checked. 
    -if src = a, we go a->b then exhaust b
    -then we remove "b" from path (a->b), so that we can check next neighbor of a. eg: a -> c, and exhaust c
   -time complexity : O(n*2^n) -> n = no of vertices in graph
                        I think the time complexity is O(2^n).
                        Think about this worst case scenario:
                        Suppose we have n nodes, labeled 0 to n-1.
                        Think of it as an array: [0, 1, 2, 3, 4, 5, 6, ..., n-1]
                        For each pair of nodes i and j, if i < j, let there be an edge between node i and node j.
                        (So, there are O(n^2) edges, though this fact is not important.)
                        Now, we want to calculate how many paths there are from the 0th node to the (n-1)th node.
                        Well, notice that each path of length k corresponds to some choice of (k - 1) nodes between 0 and (n-1).
                        For example, here are two paths of length 2:
                        0->3->(n-1)
                        0->5->(n-1)
                        Here is a path of length 3:
                        0->1->5->(n-1)
                        How many paths of length k are there? The answer is (n-2 choose k-1) because we pick k - 1 nodes between 0 and (n - 1).
                        The total number of paths is the sum of (n-2 choose k-1) for k = 1, 2, ..., (n-1).
                        Using the binomial theorem, this sum is equal to 2^(n-2) which is O(2^n).
                        
==> Clone graph
  -DFS, and BFS both works
  -time complexity: O(M+N), M = nodes, N = edges
      -that is simply total no of connections
