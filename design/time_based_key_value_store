/*
https://leetcode.com/problems/time-based-key-value-store/

981. Time Based Key-Value Store
Medium

Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.

Implement the TimeMap class:

TimeMap() Initializes the object of the data structure.
void set(String key, String value, int timestamp) Stores the key key with the value value at the given time timestamp.
String get(String key, int timestamp) Returns a value such that set was called previously, with timestamp_prev <= timestamp. If there are multiple such values, it returns the value associated with the largest timestamp_prev. If there are no values, it returns "".
 

Example 1:

Input
["TimeMap", "set", "get", "get", "set", "get", "get"]
[[], ["foo", "bar", 1], ["foo", 1], ["foo", 3], ["foo", "bar2", 4], ["foo", 4], ["foo", 5]]
Output
[null, null, "bar", "bar", null, "bar2", "bar2"]

Explanation
TimeMap timeMap = new TimeMap();
timeMap.set("foo", "bar", 1);  // store the key "foo" and value "bar" along with timestamp = 1.
timeMap.get("foo", 1);         // return "bar"
timeMap.get("foo", 3);         // return "bar", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is "bar".
timeMap.set("foo", "bar2", 4); // store the key "foo" and value "bar2" along with timestamp = 4.
timeMap.get("foo", 4);         // return "bar2"
timeMap.get("foo", 5);         // return "bar2"
*/
class TimeMap {
    /*
    key -> timesorted key,val pairs. pair<time,val>
    no need of pair class, we need TreeMap<time,val>
    
    Given: time is always increasing. so natural add order is sorted.
        -so we can just have list of Pairs, and later do binary search
    
    Lesson: we can use TreeMap<> like : HashMap<String,TreeMap<Integer,String>> map
        -the keySet() is sorted. to reverse sort : new TreeMap<>((a,b) -> b-a)); //its only key comparision
        -TreeMap provides methods like floorKey(), ceilingKey() very useful
        
    
    Note:
    Problem here in using Map is, we will not be able to do binary search on keySet easity. Iterator on keyset is sorted. so i did linear search.
    If we want to take advantage of binary search, use List.
    */

/*
New Notes:
-------------
foo:
	bar,1
	bar2,3
	abc,5
	
get(foo,2) -> bar
fet(foo,4) -> bar2

Use:
    HashMap<key,List<Pair>>	
    -create simple pair class: time, val store
    
get:
	-binary-search for ts -track smaller val
IMP:
	-todo binary search - we need sorted list. since these are timestamps, we can assume its time sorted.
	
*/
    
    class Pair {
        int time;
        String value;
        Pair(int time, String val) {
            this.time = time;
            this.value = val;
        }
    }
    
    HashMap<String,List<Pair>> map;
	
	public TimeMap(){
		map = new HashMap<>();
	}
	
	public void set(String key, String value, int timestamp){
		if(!map.containsKey(key)){
			map.put(key, new ArrayList<>());
		}
		List<Pair> list = map.get(key);
		list.add(new Pair(timestamp,value));
	}
	
	public String get(String key, int timestamp){
		if(!map.containsKey(key)){
			return "";
		}
		
		List<Pair> list = map.get(key);
		if(list.size()==0){
			return "";
		}
        /*
        safer option for binary search - figuring out edges first
		if(list.get(0).time > timestamp){
			return "";
		}
        */
		Pair ret = getPair(timestamp,list);
        if(ret == null){
            return "";
        }
		return ret.value;
	}
	
	/*
	-binary search 
	-if not found, return lesser closest, ie floor
        -template1 with tracking smaller
	*/
	private Pair getPair(int ts, List<Pair> list) {
		int l = 0;
		int r = list.size()-1;
		Pair ret = null;
		while(l<=r){
			int m = l+(r-l)/2;
			Pair p = list.get(m);
			
			if(p.time == ts){
				return p;
			}
			if(p.time > ts){
				//go left
				r = m-1;
			} else {
				//go right
				l = m+1;
				ret = p;
			}
		}
		
		return ret;
	}
    
/*    
    HashMap<String,TreeMap<Integer,String>> map;
    //HashMap<String,List<Pair>> map;
    
    // Initialize your data structure here.
    public TimeMap() {
        map = new HashMap<>();    
    }
    
    public void set(String key, String value, int timestamp) {
        TreeMap<Integer,String> tmap = map.getOrDefault(key, new TreeMap<>((a,b) -> b-a));//key comparision only.
        tmap.put(timestamp,value);        
        map.put(key,tmap);
    }
    
    public String get(String key, int timestamp) {
        if(!map.containsKey(key))
            return null;
        TreeMap<Integer,String> tmap = map.get(key);
        if(tmap.containsKey(timestamp)){
            return tmap.get(timestamp);
        }
                
        int prevTime = -1;                
        for(Integer time: tmap.keySet()) {
            //System.out.println(time);
            if(time < timestamp){
                prevTime = time;                
                break;
            }
        }
        
        
        if(prevTime == -1)
            return "";
        else
            return tmap.get(prevTime);        
        
        
    }
*/
}
/*
        
        //binary search for time. hoping this list will be sorted because of treemap - false
        List<Integer> list = new ArrayList<>(tmap.keySet());
        System.out.println(list);
        System.out.println(timestamp);
        if(list.size() > 0 && list.get(0) > timestamp) {
            return "";
        }
        
        int l = 0;
        int r = list.size()-1;
        while(l<=r){
            int mid = (l+r)/2;
            if(list.get(mid) == timestamp)
                return tmap.get(mid);
            if(list.get(mid) < timestamp){
                l++;
            } else {
                r--;
            }
        }
                
        return tmap.get(list.get(l));
        */
/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap obj = new TimeMap();
 * obj.set(key,value,timestamp);
 * String param_2 = obj.get(key,timestamp);
 */
